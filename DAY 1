1) Set Matrix Zero
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        
        int r=matrix.size();
        int c=matrix[0].size();
        
        vector<int> row(r,0);
        vector<int> col(c,0);

        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(matrix[i][j]==0)
                {
                    row[i]=1;
                    col[j]=1;
                }
            }
        }

        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(row[i] || col[j])
                {
                    matrix[i][j]=0;
                }
            }
        }
    }
};

------------------------------------------------
2)Pascal Triangle 
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        
        vector<vector<int>>ans(numRows); 

        for(int i=0;i<numRows;i++)
        { 
            ans[i].resize(i+1,1);
            //ans[i][0]=ans[i][i]=1;
       
            for(int j=1;j<i;j++)
            ans[i][j]=ans[i-1][j-1]+ans[i-1][j];
               
        }
        return ans; 
    }
};
-------------------------------------------------
3)Next Permutation 
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int idx,idx2=0;
        if(n == 1)
        return;
 
        for(int i=n-2;i>=0;i--)
        { 
            if(nums[i]<nums[i+1])
            { 
                idx = i; 
                break; 
            }
        }

        if(idx <0)
        { 
            reverse(nums.begin(),nums.end()); 
        }

        else{ 

            for(int i= n-1;i>=idx+1;i--)
            { 
                if(nums[idx]<nums[i]){
                swap(nums[idx],nums[i]);
                //idx2 = i;
                break;
            }
            }
           


            reverse(nums.begin() + idx+1,nums.end());
        }

    }
};
---------------------------------------------------
4) Kadane Algorithm 
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
      
      int largest = INT_MIN; 
        int sum = 0 ;
      for(int i =0;i<nums.size();i++)
      { 
        sum += nums[i]; 
        if(sum>largest)
        { 
            largest = max(largest,sum);
        }
        if(sum<0)
        { 
            sum =0; 
        }


      }
return largest ;
    }

};
----------------------------------------------
5)Sort Color 
class Solution {
public:
    void sortColors(vector<int>& nums) {
        
       int low = 0;
       int mid = 0;
       int high = nums.size() -1;

    while(mid<=high)
    { 
       if(nums[mid] == 0)
       { 
           swap(nums[mid],nums[low]);
           { 
               low++; 
               mid++;
           }
       }

       else if(nums[mid] ==1)
       { 
           //swap(mid,mid);
           mid++;
       }

       else { 
           swap(nums[mid],nums[high]); 
           high--;
       }
    }

    return ;

    }
};
----------------------------------------------------
6) Stock Buy and Sell 
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
            int maxprofit =0 ; 
            int profit; 
            int lowest; 
int i; 
            for(i=0;i<prices.size();i++)
            { 
                lowest = min(lowest,prices[i]); 
                profit = prices[i] - lowest; 
                maxprofit = max(profit,maxprofit);
            }
            return maxprofit;

    }
};
-----------------------------------------------------------
DONE DAY 1 SUCCESSFULLY
