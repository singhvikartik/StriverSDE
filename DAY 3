1) Search in 2D Matrix 
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int n = matrix.size(); 
        int m = matrix[0].size();

        int low = 0;
        int high = (n*m)-1; // 15 
        

        while(low<=high)
        { 
            int mid = (low + (high - low)/2); 
            if(matrix[mid/m][mid%m] == target)
            { 
                return true;
            }

            if(matrix[mid/m][mid%m] < target)
            { 
                low = mid + 1; 
            } 

            else
            { 
                high = mid -1;
            }
        }

        return false;
        
    }
};
---------------------------------------------------------
2) Pow (x,n)
class Solution {
public:
    double myPow(double x, int n) {
        if(n==0) return 1;
        long p = abs(long(n));
        double ans = 1.0;
        while(p>0){
            if(p%2 == 1){
                ans = ans*x;
            }
            x = x*x;
            p=p/2;
        }
        if(n<0){
            return 1.0/ans;
        }
        return ans;
        
    }
};
-------------------------------------------------------------
3) Majority element (>n/2) 
class Solution {
public:
    int majorityElement(vector<int>& nums) {
                int candicate = nums[0];

         int count =1; 
        for(int i=1;i<nums.size();i++){

        if(nums[i] == candicate)
        { 
            count++;
        }

        else if(count ==0) 
        { 
            
            candicate = nums[i];
            count = 1;
            
        }

        else{ 
            count--;
        }
 
        }
        return candicate;
    
    }
};
-------------------------------------------------------
4) Majority element (>n/3)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        int cnt1 = 0;
        int cnt2 = 0;
        int ele1, ele2;

        for(int i=0; i<n; i++){
            if(cnt1 == 0 && nums[i] != ele2){
                cnt1 = 1;
                ele1 = nums[i];
            }
            else if(cnt2 == 0 && nums[i] != ele1){
                cnt2 = 1;
                ele2 = nums[i];
            }

            else if(ele1 == nums[i]) cnt1++;
            else if(ele2 == nums[i]) cnt2++;

            else{
                cnt1--;
                cnt2--;
            }
        }

        cnt1 = 0;
        cnt2 = 0;
        for(int i=0; i<n; i++){
            if(nums[i] == ele1) cnt1++;
            if(nums[i] == ele2) cnt2++;
        }

        vector<int> ans;
        int mini = (n/3);
        if(cnt1 > mini)
            ans.push_back(ele1);
        if(cnt2 > mini)
            ans.push_back(ele2);

        return ans;
    }
};
-------------------------------------------------------
5) Unique Paths 
class Solution {
public:
    int solve(int i,int j,int m,int n,vector<vector<int>> &dp)
    {
        if(i>=m||j>=n)
            return 0;
        if(i==m-1&&j==n-1)
            return 1;
        
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        return dp[i][j]=solve(i+1,j,m,n,dp)+solve(i,j+1,m,n,dp);
    }
    int uniquePaths(int m, int n) {
      vector<vector<int>> dp(m,vector<int>(n,-1));
        return solve(0,0,m,n,dp);
    }
};
-----------------------------------------------------------
6) Reverse Pairs 
- not coded yet 
- done by merge sort 
